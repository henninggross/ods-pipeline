@startuml "trigger-architecture"
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml
' uncomment the following line and comment the first to use locally
' !include C4_Container.puml

LAYOUT_AS_SKETCH()
LAYOUT_WITH_LEGEND()
LAYOUT_LEFT_RIGHT()

Person_Ext(developer, "Developer")

System_Boundary(c1, "OpenShift"){
    
    Container(route, "Route", "External endpoint for Bitbucket webhook")

    Container(event_listener, "Event Listener", "Tekton-provided service", "service listening for events")

    Container(bitbucket_interceptor, "Bitbucket Interceptor", "Tekton-provided service", "Validate authenticity of event")

    Container(ods_interceptor, "ODS interceptor", "Custom service", "Manage pipelines")

    Container(trigger_binding, "Trigger Binding", "Tekton-provided resource", "Extract parameters from modified body")

    Container(trigger_template, "Trigger Template", "Tekton-provided resource", "Link trigger resources to pipeline run")

    Container(pipeline, "Pipeline", "Tekton-provided resource", "Referencing tasks, name based on Git repo and ref")

    Container(pipeline_run, "PipelineRun", "Tekton-provided resource", "URun referenced pipeline with parameters and workspace")
}

System_Ext(bitbucket_repo, "Bitbucket Repository")

Rel(developer, bitbucket_repo, "Pushes", "Git commit")

Rel(bitbucket_repo, route, "Send webhook request")

Rel(route, event_listener, "Forward", "event")

Rel(event_listener, bitbucket_interceptor, "Pass on", "event")

Rel(bitbucket_interceptor, ods_interceptor, "Pass on", "event")

Rel(ods_interceptor, trigger_binding, "Pass on", "event")
Rel(ods_interceptor, bitbucket_repo, "Download ods.y(a)ml")
Rel(ods_interceptor, pipeline, "Create or update")

Rel(trigger_binding, trigger_template, "Pass on", "event")

Rel(trigger_template, pipeline_run, "Create")

Rel(pipeline_run, pipeline, "Reference")

Lay_D(developer, bitbucket_repo)

@enduml
