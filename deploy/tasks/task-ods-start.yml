apiVersion: tekton.dev/v1beta1
kind: ClusterTask
metadata:
  name: ods-start-v0-1-0
spec:
  description: >-
    These Tasks are Git tasks to work with repositories used by other tasks in
    your Pipeline.

    The git-clone Task will clone a repo from the provided url into the output
    Workspace. By default the repo will be cloned into the root of your
    Workspace. You can clone into a subdirectory by setting this Task's
    subdirectory param.
  params:
    - default: 'gcr.io/tekton-releases/github.com/tektoncd/pipeline/cmd/git-init:v0.21.0'
      description: The location of the image.
      name: image
      type: string
    - description: git url to clone
      name: url
      type: string
    - default: ''
      description: 'git revision to checkout (branch, tag, sha, ref…)'
      name: git-ref
      type: string
    - default: ''
      description: 'git revision to checkout (branch, tag, sha, ref…)'
      name: git-full-ref
      type: string
    - default: ''
      description: (optional) git refspec to fetch before checking out revision
      name: refspec
      type: string
    - default: 'true'
      description: defines if the resource should initialize and fetch the submodules
      name: submodules
      type: string
    - default: '1'
      description: >-
        performs a shallow clone where only the most recent commit(s) will be
        fetched
      name: depth
      type: string
    - default: 'true'
      description: >-
        defines if http.sslVerify should be set to true or false in the global
        git config
      name: ssl-verify
      type: string
    - default: '.'
      description: subdirectory inside the "source" workspace to clone the git repo into
      name: subdirectory
      type: string
    - default: 'true'
      description: >-
        clean out the contents of the repo's destination directory (if it
        already exists) before trying to clone the repo there
      name: delete-existing
      type: string
    - default: ''
      description: git HTTP proxy server for non-SSL requests
      name: http-proxy
      type: string
    - default: ''
      description: git HTTPS proxy server for SSL requests
      name: https-proxy
      type: string
    - default: ''
      description: git no proxy - opt out of proxying HTTP/HTTPS requests
      name: no-proxy
      type: string
    - default: 'true'
      description: log the commands used during execution
      name: verbose
      type: string
    - description: project
      name: project
      type: string
    - description: component
      name: component
      type: string
    - description: repository
      name: repository
      type: string
    - default: ''
      description: pull request key
      name: pr-key
      type: string
    - default: ''
      description: pull request base
      name: pr-base
      type: string
  results:
    - description: The precise commit SHA that was fetched by this Task
      name: commit
    - description: The precise URL that was fetched by this Task
      name: url
  steps:
    - # default image: build/package/Dockerfile.start
      image: $(params.image)
      name: clone
      env:
        - name: BITBUCKET_URL
          valueFrom:
            configMapKeyRef:
              key: url
              name: bitbucket
        - name: BITBUCKET_ACCESS_TOKEN
          valueFrom:
            secretKeyRef:
              key: password
              name: bitbucket-auth
      resources: {}
      workingDir: $(workspaces.source.path)
      script: |

        # ods-start is built from cmd/start/main.go.
        ods-start \
          -project=$(params.project) \
          -repository=$(params.repository) \
          -component=$(params.component) \
          -git-ref=$(params.git-ref) \
          -git-ref-spec=$(params.refspec) \
          -url=$(params.url) \
          -http-proxy=$(params.http-proxy) \
          -https-proxy=$(params.https-proxy) \
          -no-proxy=$(params.no-proxy) \
          -ssl-verify=$(params.ssl-verify) \
          -submodules=$(params.submodules) \
          -depth=$(params.depth) \
          -subdirectory=$(params.subdirectory)

        cp .ods/git-commit-sha $(results.commit.path)

        echo -n "$(params.url)" > $(results.url.path)

        pwd

        ls -lah .

  workspaces:
    - description: The git repo will be cloned onto the volume backing this workspace
      name: source
