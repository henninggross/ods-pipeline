apiVersion: tekton.dev/v1beta1
kind: ClusterTask
metadata:
  name: ods-build-java{{ .Values.taskSuffix }}
spec:
  description: |
    Builds Java Gradle applications.

    The following steps are executed:
    - build and test execution (using ./gradlew clean build)
    - SonarQube quality scan

    Tests exclude the vendor directory. Test results are converted into xUnit format.

    Both xUnit report and coverage report are placed into .ods/artifacts.

    To create a coverage report be sure that you add to 'gradle.properties' the required
    configuration. E.g for enabling Jacoco you will need to:
    - add 'jacoco' plugin
    - add task 'jacocoTestReport':
        jacocoTestReport {
            reports {
              xml.enabled true
            }
        }
    - add 'finalizedBy jacocoTestReport' to the task 'test':
        tasks.named('test') {
            // Use JUnit Platform for unit tests.
            useJUnitPlatform()
            finalizedBy jacocoTestReport
        }

    After tests ran successfully, the application source code is scanned by SonarQube.

    To configure SonarQube be sure to include the property file 'sonar-project.properties'
    containing following properties:
    - sonar.sources
    - sonar.java.binaries
    - sonar.junit.reportPaths
    - sonar.coverage.jacoco.xmlReportPaths
    Otherwise the SonarQube scan will fail.

    When `sonar-quality-gate` is set to `true`, the task will fail if the quality gate
    is not passed. If SonarQube is not desired, it can be disabled via `sonar-skip`.
    The SonarQube scan will include parameters to perform a pull request analysis if
    there is an open pull request for the branch being built. Pull request decoration
    in Bitbucket is done automatically by SonarQube provided the ALM integration is setup
    properly in SonarQube.
  params:
    - name: working-dir
      description: |
        Working directory. The path must be relative to the root of the repository,
        without leading `./` and trailing `/`.
      type: string
      default: ""
    - name: gradle-additional-tasks
      description: >-
        TODO
      type: string
      default: ""
    - name: gradle-options
      description: >-
        TODO
      type: string
      default: ""
    - name: output-dir
      description: >-
        Path to the directory into which the resulting Java application jar should be copied, relative to `working-dir`.
        This directory may then later be used as Docker context for example.
      type: string
      default: docker
    - name: sonar-quality-gate
      description: Whether the SonarQube quality gate needs to pass for the task to succeed.
      type: string
      default: "false"
    - name: sonar-skip
      description: Whether to skip SonarQube analysis or not.
      type: string
      default: "false"
  steps:
    - name: build-java-binary
      # Image is built from build/package/Dockerfile.java-toolset.
      image: '{{ .Values.registry }}/{{ .Values.namespace }}/ods-java-toolset:{{ .Values.imageTag }}'
      env:
        - name: DEBUG
          valueFrom:
            configMapKeyRef:
              key: debug
              name: ods-pipeline
      resources: {}
      script: |
        # build-java is build/package/scripts/build-java.sh.
        build-java \
          --working-dir=$(params.working-dir) \
          --output-dir=$(params.output-dir) \
          --gradle-additional-tasks=$(params.gradle-additional-tasks) \
          --gradle-options=$(params.gradle-options)
      workingDir: $(workspaces.source.path)
    - name: scan-with-sonar
      # Image is built from build/package/Dockerfile.sonar.
      image: '{{ .Values.registry }}/{{ .Values.namespace }}/ods-sonar:{{ .Values.imageTag }}'
      env:
        - name: SONAR_URL
          valueFrom:
            configMapKeyRef:
              key: url
              name: ods-sonar
        - name: SONAR_AUTH_TOKEN
          valueFrom:
            secretKeyRef:
              key: password
              name: ods-sonar-auth
        - name: DEBUG
          valueFrom:
            configMapKeyRef:
              key: debug
              name: ods-pipeline
      resources: {}
      script: |
        if [ "$(params.sonar-skip)" = "true" ]; then
          echo "Skipping SonarQube analysis"
        else
          mkdir -p .ods/artifacts/sonarqube-analysis
          # sonar is built from cmd/sonar/main.go.
          sonar \
            -working-dir=$(params.working-dir) \
            -quality-gate=$(params.sonar-quality-gate)
        fi
      workingDir: $(workspaces.source.path)
  workspaces:
    - name: source
