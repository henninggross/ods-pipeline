# Generated by cmd/sidecar-tasks/main.go; DO NOT EDIT.
apiVersion: tekton.dev/v1beta1
kind: '{{default "ClusterTask" .Values.taskKind}}'
metadata:
  creationTimestamp: null
  name: ods-build-go-with-sidecar{{.Values.taskSuffix}}
spec:
  description: |-
    Builds Go (module) applications.

    The following steps are executed:

    - check proper formatting against gofmt
    - linting using golangci-lint
    - build (using `go-os` and `go-arch` parameters)
    - test execution

    Tests exclude the vendor directory. Test results are converted into xUnit format.

    Both xUnit report and coverage report are placed into .ods/artifacts.

    The built binary is named `app` and placed into the directory specified by `output-dir`.

    After tests ran successfully, the application source code is scanned by SonarQube.
    When `sonar-quality-gate` is set to `true`, the task will fail if the quality gate
    is not passed. If SonarQube is not desired, it can be disabled via `sonar-skip`.
    The SonarQube scan will include parameters to perform a pull request analysis if
    there is an open pull request for the branch being built. If the
    link:https://docs.sonarqube.org/latest/analysis/bitbucket-integration/[ALM integration]
    is setup properly, pull request decoration in Bitbucket is done automatically.

    **Sidecar variant!** Use this task if you need to run a container next to the build task.
    For example, this could be used to run a database to allow for integration tests.
    The sidecar image to must be supplied via `sidecar-image`.
    Apart from the sidecar, the task is an exact copy of `ods-build-go`.
  params:
  - default: .
    description: |
      Working directory. The path must be relative to the root of the repository,
      without leading `./` and trailing `/`.
    name: working-dir
    type: string
  - default: "false"
    description: Whether to enable CGO. When not enabled the build will set `CGO_ENABLED=0`.
    name: enable-cgo
    type: string
  - default: linux
    description: '`GOOS` variable (the execution operating system such as `linux`,
      `windows`).'
    name: go-os
    type: string
  - default: amd64
    description: '`GOARCH` variable (the execution architecture such as `arm`, `amd64`).'
    name: go-arch
    type: string
  - default: docker
    description: Path to the directory into which the resulting Go binary should be
      copied, relative to `working-dir`. This directory may then later be used as
      Docker context for example.
    name: output-dir
    type: string
  - default: ""
    description: Script to execute before running tests, relative to the working directory.
    name: pre-test-script
    type: string
  - default: "false"
    description: Whether the SonarQube quality gate needs to pass for the task to
      succeed.
    name: sonar-quality-gate
    type: string
  - default: "false"
    description: Whether to skip SonarQube analysis or not.
    name: sonar-skip
    type: string
  - description: Image to use for sidecar
    name: sidecar-image
    type: string
  sidecars:
  - Workspaces: null
    image: $(params.sidecar-image)
    name: sidecar
    resources: {}
  steps:
  - env:
    - name: HOME
      value: /tekton/home
    - name: DEBUG
      valueFrom:
        configMapKeyRef:
          key: debug
          name: ods-pipeline
    image: '{{.Values.registry}}/{{.Values.namespace}}/ods-go-toolset:{{.Values.imageTag}}'
    name: build-go-binary
    resources: {}
    script: |2

      # build-go is build/package/scripts/build-go.sh.
      build-go \
        --working-dir=$(params.working-dir) \
        --enable-cgo=$(params.enable-cgo) \
        --go-os=$(params.go-os) \
        --go-arch=$(params.go-arch) \
        --pre-test-script=$(params.pre-test-script) \
        --output-dir=$(params.output-dir) \
        --debug=${DEBUG}
    workingDir: $(workspaces.source.path)
  - env:
    - name: HOME
      value: /tekton/home
    - name: SONAR_URL
      valueFrom:
        configMapKeyRef:
          key: url
          name: ods-sonar
    - name: SONAR_AUTH_TOKEN
      valueFrom:
        secretKeyRef:
          key: password
          name: ods-sonar-auth
    - name: DEBUG
      valueFrom:
        configMapKeyRef:
          key: debug
          name: ods-pipeline
    image: '{{.Values.registry}}/{{.Values.namespace}}/ods-sonar:{{.Values.imageTag}}'
    name: scan-with-sonar
    resources: {}
    script: |
      if [ "$(params.sonar-skip)" = "true" ]; then
        echo "Skipping SonarQube analysis"
      else
        mkdir -p .ods/artifacts/sonarqube-analysis
        # sonar is built from cmd/sonar/main.go.
        sonar \
          -working-dir=$(params.working-dir) \
          -quality-gate=$(params.sonar-quality-gate)
      fi
    workingDir: $(workspaces.source.path)
  workspaces:
  - name: source
