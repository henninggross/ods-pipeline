# Generated by cmd/sidecar-tasks/main.go; DO NOT EDIT.
apiVersion: tekton.dev/v1beta1
kind: '{{default "ClusterTask" .Values.taskKind}}'
metadata:
  creationTimestamp: null
  name: '{{default "ods" .Values.taskPrefix}}-build-go-with-sidecar{{.Values.taskSuffix}}'
spec:
  description: |-
    Builds Go (module) applications.

    The exact build recipe can be found at
    link:https://github.com/opendevstack/ods-pipeline/blob/master/build/package/scripts/build-go.sh[build/package/scripts/build-go.sh].

    The following provides an overview of the performed steps:

    - Source files are checked to be formatted with `gofmt`.
    - The go module cache is configured to be on the cache location of the PVC by setting environment variable `GOMODCACHE` to `.ods-cache/deps/gomod` (see link:https://go.dev/ref/mod#module-cache[go module cache]).
    - `golanci-lint` is run. The linter can be configured via a
      config file as described in the
      link:https://golangci-lint.run/usage/configuration/[configuration documentation].
    - Tests are executed. A potential `vendor` directory is excluded. Test
      results are converted into xUnit format. If test artifacts are already present for
      the current Git commit SHA, testing is skipped.
    - Application binary (named `app`) is built and placed into the directory
      specified by `output-dir`.

    Finally, the application source code is scanned by SonarQube.
    Default SonarQube project properties are provided unless `sonar-project.properties`
    is present.
    When `sonar-quality-gate` is set to `true`, the task will fail if the quality gate
    is not passed. If SonarQube is not desired, it can be disabled via `sonar-skip`.
    The SonarQube scan will include parameters to perform a pull request analysis if
    there is an open pull request for the branch being built. If the
    link:https://docs.sonarqube.org/latest/analysis/bitbucket-integration/[ALM integration]
    is setup properly, pull request decoration in Bitbucket is done automatically.

    The following artifacts are generated by the build task and placed into `.ods/artifacts/`

    * `code-coverage/`
      ** `coverage.out`
    * `lint-reports/`
      ** `report.txt`
    * `sonarqube-analysis/`
      ** `analysis-report.md`
      ** `issues-report.csv`
      ** `quality-gate.json`
    * `xunit-reports/`
      ** `report.xml`

    **Sidecar variant!** Use this task if you need to run a container next to the build task.
    For example, this could be used to run a database to allow for integration tests.
    The sidecar image to must be supplied via `sidecar-image`.
    Apart from the sidecar, the task is an exact copy of `ods-build-go`.
  params:
  - default: .
    description: |
      Working directory. The path must be relative to the root of the repository,
      without leading `./` and trailing `/`.
    name: working-dir
    type: string
  - default: "false"
    description: Whether to enable CGO. When not enabled the build will set `CGO_ENABLED=0`.
    name: enable-cgo
    type: string
  - default: linux
    description: '`GOOS` variable (the execution operating system such as `linux`,
      `windows`).'
    name: go-os
    type: string
  - default: amd64
    description: '`GOARCH` variable (the execution architecture such as `arm`, `amd64`).'
    name: go-arch
    type: string
  - default: docker
    description: Path to the directory into which the resulting Go binary should be
      copied, relative to `working-dir`. This directory may then later be used as
      Docker context for example.
    name: output-dir
    type: string
  - default: "true"
    description: If enabled tasks uses or populates cache with the output dir contents
      (and reports) so that a build can be skipped if the `working-dir` contents did
      not change.
    name: cache-output-dir
    type: string
  - default: all
    description: If cache-output-dir is enabled then cache-build-variant-key allows
      to keep multiple builds on the same working dir apart. For go, the cache locations
      for different target platform and architecture combinations are allready separated.
    name: cache-build-variant-key
    type: string
  - default: ""
    description: Script to execute before running tests, relative to the working directory.
    name: pre-test-script
    type: string
  - default: "false"
    description: Whether the SonarQube quality gate needs to pass for the task to
      succeed.
    name: sonar-quality-gate
    type: string
  - default: "false"
    description: Whether to skip SonarQube analysis or not.
    name: sonar-skip
    type: string
  - description: Image to use for sidecar
    name: sidecar-image
    type: string
  results:
  - description: The cache location that the build task used. If caching is not enabled
      this will be an empty string.
    name: build-reused-from-location
  sidecars:
  - Workspaces: null
    image: $(params.sidecar-image)
    name: sidecar
    resources: {}
  steps:
  - env:
    - name: HOME
      value: /tekton/home
    - name: CI
      value: "true"
    - name: DEBUG
      valueFrom:
        configMapKeyRef:
          key: debug
          name: ods-pipeline
    image: '{{.Values.registry}}/{{.Values.namespace}}/ods-go-toolset:{{.Values.imageTag}}'
    name: build-go-binary
    resources: {}
    script: |
      set -e
      echo -n "" > $(results.build-reused-from-location.path)
      cache_build_key="go-$(params.go-os)-$(params.go-arch)-$(params.cache-build-variant-key)"
      if copy-build-if-cached \
        --cache-output-dir=$(params.cache-output-dir) \
        --cache-build-key="$cache_build_key" \
        --cache-location-used-path=$(results.build-reused-from-location.path) \
        --working-dir=$(params.working-dir) \
        --output-dir=$(params.output-dir) \
        --debug=${DEBUG} ; then
        exit 0
      fi
      # build-go is build/package/scripts/build-go.sh.
      build-go \
        --working-dir=$(params.working-dir) \
        --enable-cgo=$(params.enable-cgo) \
        --go-os=$(params.go-os) \
        --go-arch=$(params.go-arch) \
        --pre-test-script=$(params.pre-test-script) \
        --output-dir=$(params.output-dir) \
        --debug=${DEBUG}
      if [ "$(params.cache-output-dir)" == "true" ]; then
        cache-build \
          --cache-build-key="$cache_build_key" \
          --cache-location-used-path=$(results.build-reused-from-location.path) \
          --working-dir=$(params.working-dir) \
          --output-dir=$(params.output-dir) \
          --debug=${DEBUG}
      fi
    workingDir: $(workspaces.source.path)
  - env:
    - name: HOME
      value: /tekton/home
    - name: SONAR_URL
      valueFrom:
        configMapKeyRef:
          key: url
          name: ods-sonar
    - name: SONAR_EDITION
      valueFrom:
        configMapKeyRef:
          key: edition
          name: ods-sonar
    - name: SONAR_AUTH_TOKEN
      valueFrom:
        secretKeyRef:
          key: password
          name: ods-sonar-auth
    - name: DEBUG
      valueFrom:
        configMapKeyRef:
          key: debug
          name: ods-pipeline
    image: '{{.Values.registry}}/{{.Values.namespace}}/ods-sonar:{{.Values.imageTag}}'
    name: scan-with-sonar
    resources: {}
    script: |
      if [ "$(params.sonar-skip)" = "true" ]; then
        echo "Skipping SonarQube analysis"
      else
        mkdir -p .ods/artifacts/sonarqube-analysis
        # sonar is built from cmd/sonar/main.go.
        sonar \
          -working-dir=$(params.working-dir) \
          -quality-gate=$(params.sonar-quality-gate)
      fi
    workingDir: $(workspaces.source.path)
  workspaces:
  - name: source
