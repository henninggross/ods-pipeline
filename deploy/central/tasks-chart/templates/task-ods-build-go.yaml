apiVersion: tekton.dev/v1beta1
kind: ClusterTask
metadata:
  name: ods-build-go{{.Values.taskSuffix}}
spec:
  description: |
    Builds Go (module) applications.

    The following steps are executed:

    - check proper formatting against gofmt
    - linting using golangci-lint
    - build (using `go-os` and `go-arch` parameters)
    - test execution

    Tests exclude the vendor directory. Test results are converted into xUnit format.

    Both xUnit report and coverage report are placed into .ods/artifacts.

    The built binary is named `app` and placed into the directory specified by `output-dir`.

    After tests ran successfully, the application source code is scanned by SonarQube.
    When `sonar-quality-gate` is set to `true`, the task will fail if the quality gate
    is not passed. If SonarQube is not desired, it can be disabled via `sonar-skip`.
    The SonarQube scan will include parameters to perform a pull request analysis if
    there is an open pull request for the branch being built. Pull request decoration
    in Bitbucket is done automatically by SonarQube provided the ALM integration is setup
    properly in SonarQube.
  params:
    - name: working-dir
      description: |
        Working directory. The path must be relative to the root of the repository,
        without leading `./` and trailing `/`.
      type: string
      default: "."
    - name: enable-cgo
      description: Whether to enable CGO. When not enabled the build will set `CGO_ENABLED=0`.
      type: string
      default: "false"
    - name: go-os
      description: "`GOOS` variable (the execution operating system such as `linux`, `windows`)."
      type: string
      default: "linux"
    - name: go-arch
      description: "`GOARCH` variable (the execution architecture such as `arm`, `amd64`)."
      type: string
      default: "amd64"
    - name: output-dir
      description: >-
        Path to the directory into which the resulting Go binary should be copied, relative to `working-dir`.
        This directory may then later be used as Docker context for example.
      type: string
      default: docker
    - name: pre-test-script
      description: Script to execute before running tests, relative to the working directory.
      type: string
      default: ""
    - name: sonar-quality-gate
      description: Whether the SonarQube quality gate needs to pass for the task to succeed.
      type: string
      default: "false"
    - name: sonar-skip
      description: Whether to skip SonarQube analysis or not.
      type: string
      default: "false"
  steps:
    - name: build-go-binary
      # Image is built from build/package/Dockerfile.go-toolset.
      image: '{{.Values.registry}}/{{.Values.namespace}}/ods-go-toolset:{{.Values.imageTag}}'
      env:
        - name: HOME
          value: '/tekton/home'
        - name: DEBUG
          valueFrom:
            configMapKeyRef:
              key: debug
              name: ods-pipeline
      resources: {}
      script: |

        # build-go is build/package/scripts/build-go.sh.
        build-go \
          --working-dir=$(params.working-dir) \
          --enable-cgo=$(params.enable-cgo) \
          --go-os=$(params.go-os) \
          --go-arch=$(params.go-arch) \
          --pre-test-script=$(params.pre-test-script) \
          --output-dir=$(params.output-dir) \
          --debug=${DEBUG}
      workingDir: $(workspaces.source.path)
    - name: scan-with-sonar
      # Image is built from build/package/Dockerfile.sonar.
      image: '{{.Values.registry}}/{{.Values.namespace}}/ods-sonar:{{.Values.imageTag}}'
      env:
        - name: HOME
          value: '/tekton/home'
        - name: SONAR_URL
          valueFrom:
            configMapKeyRef:
              key: url
              name: ods-sonar
        - name: SONAR_AUTH_TOKEN
          valueFrom:
            secretKeyRef:
              key: password
              name: ods-sonar-auth
        - name: DEBUG
          valueFrom:
            configMapKeyRef:
              key: debug
              name: ods-pipeline
      resources: {}
      script: |
        if [ "$(params.sonar-skip)" = "true" ]; then
          echo "Skipping SonarQube analysis"
        else
          mkdir -p .ods/artifacts/sonarqube-analysis
          # sonar is built from cmd/sonar/main.go.
          sonar \
            -working-dir=$(params.working-dir) \
            -quality-gate=$(params.sonar-quality-gate)
        fi
      workingDir: $(workspaces.source.path)
  workspaces:
    - name: source
