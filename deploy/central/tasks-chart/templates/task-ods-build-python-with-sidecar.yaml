# Generated by cmd/sidecar-tasks/main.go; DO NOT EDIT.
apiVersion: tekton.dev/v1beta1
kind: '{{default "ClusterTask" .Values.taskKind}}'
metadata:
  creationTimestamp: null
  name: '{{default "ods" .Values.taskPrefix}}-build-python-with-sidecar{{.Values.taskSuffix}}'
spec:
  description: |-
    Builds Python applications.

    The exact build recipe can be found at
    link:https://github.com/opendevstack/ods-pipeline/blob/master/build/package/scripts/build-python.sh[build/package/scripts/build-python.sh].
    In particular, the Python source files are expected to be located in `src`.

    After tests ran successfully, the application source code is scanned by SonarQube.
    Default SonarQube project properties are provided unless `sonar-project.properties`
    is present.
    When `sonar-quality-gate` is set to `true`, the task will fail if the quality gate
    is not passed. If SonarQube is not desired, it can be disabled via `sonar-skip`.
    The SonarQube scan will include parameters to perform a pull request analysis if
    there is an open pull request for the branch being built. If the
    link:https://docs.sonarqube.org/latest/analysis/bitbucket-integration/[ALM integration]
    is setup properly, pull request decoration in Bitbucket is done automatically.

    The following artifacts are generated by the build task and placed into `.ods/artifacts/`

    * `code-coverage/`
      ** `coverage.xml`
    * `sonarqube-analysis/`
      ** `analysis-report.md`
      ** `issues-report.csv`
      ** `quality-gate.json`
    * `xunit-reports/`
      ** `report.xml`

    **Sidecar variant!** Use this task if you need to run a container next to the build task.
    For example, this could be used to run a database to allow for integration tests.
    The sidecar image to must be supplied via `sidecar-image`.
    Apart from the sidecar, the task is an exact copy of `ods-build-python`.
  params:
  - default: .
    description: |
      Working directory. The path must be relative to the root of the repository,
      without leading `./` and trailing `/`.
    name: working-dir
    type: string
  - default: docker
    description: Path to the directory into which outputs should be placed, relative
      to `working-dir`. This directory may then later be used as Docker context for
      example.
    name: output-dir
    type: string
  - default: "false"
    description: If enabled tasks uses or populates cache with the output dir contents
      (and reports) so that a build can be skipped if the `working-dir` contents did
      not change. For single build repos enabling build caching has limited benefits.
      For multi build repos enabling this is recommended unless the build is dependant
      on files outside of the working directory. See ADR caching-build-tasks for more
      details and workarounds.
    name: cache-build
    type: string
  - default: "120"
    description: Maximum line length.
    name: max-line-length
    type: string
  - default: ""
    description: Script to execute before running tests, relative to the working directory.
    name: pre-test-script
    type: string
  - default: "false"
    description: Whether quality gate needs to pass.
    name: sonar-quality-gate
    type: string
  - default: "false"
    description: Whether to skip the SonarQube analysis or not.
    name: sonar-skip
    type: string
  - description: Image to use for sidecar
    name: sidecar-image
    type: string
  results:
  - description: The cache location that the build task used. If caching is not enabled
      this will be an empty string.
    name: build-reused-from-location
  sidecars:
  - Workspaces: null
    image: $(params.sidecar-image)
    name: sidecar
    resources: {}
  steps:
  - env:
    - name: HOME
      value: /tekton/home
    - name: CI
      value: "true"
    - name: NEXUS_URL
      valueFrom:
        configMapKeyRef:
          key: url
          name: ods-nexus
    - name: NEXUS_USERNAME
      valueFrom:
        secretKeyRef:
          key: username
          name: ods-nexus-auth
    - name: NEXUS_PASSWORD
      valueFrom:
        secretKeyRef:
          key: password
          name: ods-nexus-auth
    - name: DEBUG
      valueFrom:
        configMapKeyRef:
          key: debug
          name: ods-pipeline
    image: '{{.Values.registry}}/{{.Values.namespace}}/ods-python-toolset:{{.Values.imageTag}}'
    name: build-python
    resources: {}
    script: |
      set -e
      echo -n "" > $(results.build-reused-from-location.path)
      cache_build_key=python
      if copy-build-if-cached \
        --cache-build=$(params.cache-build) \
        --cache-build-key="$cache_build_key" \
        --cache-location-used-path=$(results.build-reused-from-location.path) \
        --working-dir=$(params.working-dir) \
        --output-dir=$(params.output-dir) \
        --debug=${DEBUG} ; then
        exit 0
      fi
      # build-python is build/package/scripts/build-python.sh.
      build-python \
        --working-dir=$(params.working-dir) \
        --max-line-length=$(params.max-line-length) \
        --pre-test-script=$(params.pre-test-script) \
        --output-dir=$(params.output-dir) \
        --debug=${DEBUG}
      if [ "$(params.cache-build)" == "true" ]; then
        cache-build \
          --cache-build-key="$cache_build_key" \
          --cache-location-used-path=$(results.build-reused-from-location.path) \
          --working-dir=$(params.working-dir) \
          --output-dir=$(params.output-dir) \
          --debug=${DEBUG}
      fi
    workingDir: $(workspaces.source.path)
  - env:
    - name: HOME
      value: /tekton/home
    - name: SONAR_URL
      valueFrom:
        configMapKeyRef:
          key: url
          name: ods-sonar
    - name: SONAR_EDITION
      valueFrom:
        configMapKeyRef:
          key: edition
          name: ods-sonar
    - name: SONAR_AUTH_TOKEN
      valueFrom:
        secretKeyRef:
          key: password
          name: ods-sonar-auth
    - name: DEBUG
      valueFrom:
        configMapKeyRef:
          key: debug
          name: ods-pipeline
    image: '{{.Values.registry}}/{{.Values.namespace}}/ods-sonar:{{.Values.imageTag}}'
    name: scan-with-sonar
    resources: {}
    script: |
      if [ "$(params.sonar-skip)" = "true" ]; then
        echo "Skipping SonarQube analysis"
      else
        mkdir -p .ods/artifacts/sonarqube-analysis
        # sonar is built from cmd/sonar/main.go.
        sonar \
          -working-dir=$(params.working-dir) \
          -quality-gate=$(params.sonar-quality-gate)
      fi
    workingDir: $(workspaces.source.path)
  workspaces:
  - name: source
