apiVersion: tekton.dev/v1beta1
kind: '{{default "Task" .Values.global.taskKind}}'
metadata:
  name: '{{default "ods" .Values.taskPrefix}}-build-typescript{{.Values.global.taskSuffix}}'
spec:
  description: |
    Builds Typescript applications.

    The following steps are executed:

    - checks that package.json and package-lock.json exists to require best practice of using lock files. See also link:https://github.com/opendevstack/ods-pipeline/discussions/411[discussion 411]
    - linting using `eslint`
    - build typescript application, using `npm run build`
    - test execution
    - SonarQube quality scan

    For `eslint` to work there needs to be a config file (`eslintrc.json` or similar) at the root of the working directory.
    This can be done by running `eslint --init` or by following the link:https://eslint.org/docs/user-guide/getting-started[official documentation]

    The exact build recipe can be found at
    link:https://github.com/opendevstack/ods-pipeline/blob/master/build/package/scripts/build-typescript.sh[build/package/scripts/build-typescript.sh].
    In particular, `npm run build` is expected to place outputs into `dist`.

    After tests ran successfully, the application source code is scanned by SonarQube.
    Default SonarQube project properties are provided unless `sonar-project.properties`
    is present.
    When `sonar-quality-gate` is set to `true`, the task will fail if the quality gate
    is not passed. If SonarQube is not desired, it can be disabled via `sonar-skip`.
    The SonarQube scan will include parameters to perform a pull request analysis if
    there is an open pull request for the branch being built. If the
    link:https://docs.sonarqube.org/latest/analysis/bitbucket-integration/[ALM integration]
    is setup properly, pull request decoration in Bitbucket is done automatically.

    The following artifacts are generated by the build task and placed into `.ods/artifacts/`

    * `code-coverage/`
      ** `clover.xml`
      ** `coverage-final.json`
      ** `lcov.info`
    * `lint-reports`
      ** `report.txt`
    * `sonarqube-analysis/`
      ** `analysis-report.md`
      ** `issues-report.csv`
      ** `quality-gate.json`
    * `xunit-reports/`
      ** `report.xml`
  params:
    - name: working-dir
      description: |
        Working directory. The path must be relative to the root of the repository,
        without leading `./` and trailing `/`.
      type: string
      default: "."
    - name: output-dir
      description: >-
        Path to the directory into which outputs should be placed, relative to `working-dir`.
        This directory may then later be used as Docker context for example.
      type: string
      default: docker
    - name: max-lint-warnings
      description: >-
        Maximum of allowed linting warnings after which eslint will exit with an error.
        Set to "-1" to never exit with an error due to warnings.
      type: string
      default: "0"
    - name: lint-file-ext
      description: File extensions to lint separated by a comma.
      type: string
      default: ".js,.ts,.jsx,.tsx,.svelte"
    - name: sonar-quality-gate
      description: Whether quality gate needs to pass.
      type: string
      default: "false"
    - name: sonar-skip
      description: Whether to skip the SonarQube analysis or not.
      type: string
      default: "false"
    - name: node-version
      description: "Node.js version to use - supported versions: 16"
      type: string
      default: "16"
    - name: build-dir
      description: >-
        Must match the directory into which `npm run build` places files.
        The files inside `build-dir` will be copied to the `dist` folder in `output-dir`
        As a result the files will be in `$output-dir/dist`
        Other common build directories are `build` and `public`.
      type: string
      default: "dist"
    - name: copy-node-modules
      description: >-
        Whether `node-modules` is copied to the `output-dir` or not.
        If copied the node modules are in `$output-dir/dist/node_modules`. 
        For frontend components this should be set to "false",
        while for backend components this should be set to "true".
      type: string
      default: "false"
  {{- with ((.Values.typescript).sidecars) }}
  sidecars:
    {{- toYaml . | nindent 4 }}
  {{- end }}
  steps:
    - name: build-typescript
      # Image is built from build/package/Dockerfile.node-xx-typescript-toolset.
      image: '{{.Values.registry}}/{{.Values.namespace}}/ods-node$(params.node-version)-typescript-toolset:{{.Values.global.imageTag}}'
      env:
        - name: HOME
          value: '/tekton/home'
        - name: CI
          value: "true"
        - name: NEXUS_URL
          valueFrom:
            configMapKeyRef:
              key: url
              name: ods-nexus
        - name: NEXUS_USERNAME
          valueFrom:
            secretKeyRef:
              key: username
              name: ods-nexus-auth
        - name: NEXUS_PASSWORD
          valueFrom:
            secretKeyRef:
              key: password
              name: ods-nexus-auth
        - name: DEBUG
          valueFrom:
            configMapKeyRef:
              key: debug
              name: ods-pipeline
      resources:
        {{- (.Values.typescript).resources | default dict | toYaml | nindent 8 }}
      script: |

        # build-typescript is build/package/scripts/build-typescript.sh.
        build-typescript \
          --working-dir=$(params.working-dir) \
          --output-dir=$(params.output-dir) \
          --debug=${DEBUG} \
          --max-lint-warnings=$(params.max-lint-warnings) \
          --lint-file-ext=$(params.lint-file-ext) \
          --build-dir=$(params.build-dir) \
          --copy-node-modules=$(params.copy-node-modules)
      workingDir: $(workspaces.source.path)
    {{- include "sonar-step" . | indent 4}}
  workspaces:
    - name: source
