# General
# Serviceaccount name to use for pipeline resources.
serviceAccountName: 'pipeline'
# Whether to enable debug mode
debug: 'false'

# Bitbucket
# Bitbucket URL (including scheme). Example: https://bitbucket.example.com.
bitbucketUrl: ''
# Bitbucket username. Example: cd_user.
bitbucketUsername: ''

# Nexus
# Nexus URL (including scheme). Example: https://nexus.example.com.
nexusUrl: ''
# Nexus username. Example: developer.
nexusUsername: ''
# Nexus repository for temporary artifacts (stage = dev)
nexusTemporaryRepository: 'ods-temporary-artifacts'
# Nexus repository for permanent artifacts (stage = qa|prod)
nexusPermanentRepository: 'ods-permanent-artifacts'

# Sonar
# SonarQube URL (including scheme). Example: https://sonarqube.example.com.
sonarUrl: ''
# SonarQube username. Example: developer.
sonarUsername: ''

# Aqua
# Aqua URL (including scheme). Example: https://aqua.example.com.
# Leave empty when not using Aqua.
aquaUrl: ''
# Aqua registry name.
# Leave empty when not using Aqua.
aquaRegistry: ''
# Aqua username. Example: developer.
# Leave empty when not using Aqua.
aquaUsername: ''

# Cluster
# URL (including scheme) of the OpenShift Web Console.
consoleUrl: 'http://example.com'

# Notification Webhook
notification:
  # URL of the configured webhook
  url: 'http://example.com'
  # The HTTP method to be used
  method: 'POST'
  # The HTTP content type header
  contentType: 'application/json'
  # Template to be processed and accepted by the configured webhook in use
  # Below example might work for Microsoft Teams
  requestTemplate: |-
    {
        "@context": "https://schema.org/extensions",
        "@type": "MessageCard",
        "themeColor": "c60000",
        "title": "{{.ODSContext.Project}} - ODS Pipeline Build finished",
        "text": "ODS Pipeline run finished with status {{.OverallStatus}}!",
        "potentialAction": [
            {
                "@type": "OpenUri",
                "name": "Learn More",
                "targets": [
                    { "os": "default", "uri": "{{.PipelineRunURL}}" }
                ]
            }
        ]
    }

# Webhook Interceptor
interceptor:
  # PVC (used for the pipeline workspace)
  # Storage provisioner. On AWS backed clusters, use 'kubernetes.io/aws-ebs'.
  storageProvisioner: 'kubernetes.io/aws-ebs'
  # Storage class. On AWS backed clusters, use 'gp2'.
  storageClassName: 'gp2'
  # Storage size. Defaults to 2Gi unless set explicitly here.
  storageSize: '5Gi'
  # Number of replicas to run for the interceptor.
  replicaCount: 1
  image:
    # Image registry from which to pull the webhook interceptor container image.
    registry: image-registry.openshift-image-registry.svc:5000
    # Namespace from which to pull the webhook interceptor container image.
    # If not given, the image is pulled from the release namespace.
    namespace: ods
    # Repository (ImageStream) from which to pull the webhook interceptor
    # container image.
    # If not given, the image name equals the chart name.
    repository: ods-webhook-interceptor
    # Pull policy.
    pullPolicy: Always
    # Image tag to pull.
    # If not given, defaults to the chart appVersion.
    # tag: "0.2.0"
  # Deployment pod resources. Typically these settings should not need to change.
  resources:
    limits:
      cpu: 100m
      memory: 128Mi
    requests:
      cpu: 100m
      memory: 128Mi
